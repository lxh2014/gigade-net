using System;
using System.Collections.Generic;
using System.Data;
using System.Web;
using System.Web.Mvc;
using BLL.gigade.Common;
using BLL.gigade.Mgr;
using BLL.gigade.Mgr.Impl;
using BLL.gigade.Model.Query;

namespace Admin.gigade.Controllers
{
    public class ScheduleServiceController : Controller
    {
        private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        private static readonly string mySqlConnectionString = System.Configuration.ConfigurationManager.AppSettings["MySqlConnectionString"].ToString();
        string xmlPath = System.Configuration.ConfigurationManager.AppSettings["SiteConfig"];//
        private ScheduleServiceMgr _secheduleServiceMgr;
        // GET: /Schedule/

        public ActionResult Index()
        {
            return View();
        }
<<<<<<< HEAD
=======


>>>>>>> 36e42aba117134eb33fc44ec935d906668599d1d
        /// <summary>
        /// 獲取需要執行的排程列表并逐個執行；
        /// </summary>
        /// <returns></returns>
        public HttpResponseBase GetExeScheduleServiceList()
        {
            //獲取需要執行的排程

            List<ScheduleMasterQuery> store = new List<ScheduleMasterQuery>();
            _secheduleServiceMgr = new ScheduleServiceMgr(mySqlConnectionString);

            try
            {
                ScheduleMasterQuery query = new ScheduleMasterQuery();
                query.schedule_state = 1;
                store = _secheduleServiceMgr.GetExeScheduleMasterList(query);
                foreach (ScheduleMasterQuery item in store)
                {
                    try
                    {
                            //獲取該排程參數
                            List<ScheduleConfigQuery> store_config = new List<ScheduleConfigQuery>();
                            ScheduleConfigQuery query_config = new ScheduleConfigQuery();
                            query_config.schedule_code = item.schedule_code;
                            store_config = _secheduleServiceMgr.GetScheduleConfig(query_config);
                            //執行排程
                            string path = System.Web.HttpContext.Current.Server.MapPath(xmlPath);
                            SiteConfigMgr _siteConfigMgr = new SiteConfigMgr(path);
                            BLL.gigade.Model.SiteConfig NETDoMain_Name = _siteConfigMgr.GetConfigByName("NETDoMain_Name");

                            string api = "http://" + NETDoMain_Name.Value + "/" + item.schedule_api;
                            bool result = _secheduleServiceMgr.ExeScheduleService(api, store_config);
                           
                            if (result)
                            {
                                //記錄排程執行記錄
                                ScheduleLogQuery query_log = new ScheduleLogQuery();
                                query_log.schedule_code = item.schedule_code;
                                query_log.schedule_period_id = item.schedule_period_id;
                                query_log.create_user = item.change_user;
                                //query_log.create_user = int.Parse((System.Web.HttpContext.Current.Session["caller"] as BLL.gigade.Model.Caller).user_id.ToString());

                                query_log.ipfrom = BLL.gigade.Common.CommonFunction.GetIP4Address(Request.UserHostAddress.ToString());
                                _secheduleServiceMgr.AddScheduleLog(query_log);
                            }
                            
                            //更新SchedulePeriod表的current_nums;ScheduleMaster表的previous_execute_time、next_execute_time、state；
                            //更新current_nums欄位；
                            SchedulePeriodQuery query_period = new SchedulePeriodQuery();
                            query_period.rowid = item.schedule_period_id;
                            query_period = _secheduleServiceMgr.GetSchedulePeriod(query_period);
                            query_period.current_nums += 1;
                            _secheduleServiceMgr.UpdateSchedulePeriod(query_period);

                            //更新ScheduleMaster表的previous_execute_time、next_execute_time、state；
                            item.previous_execute_time = item.next_execute_time;
                            //獲取next_execute_time和schedule_period_id
                            int schedule_period_id = 0;
                            item.next_execute_time = _secheduleServiceMgr.GetNext_Execute_Time(item.rowid, out schedule_period_id);
                            item.schedule_period_id = schedule_period_id;
                            if (item.next_execute_time == 0)
                            {
                                item.schedule_state = 0;
                            }
                            _secheduleServiceMgr.UpdateScheduleMaster(item);
                    }
                    catch (Exception ex)
                    {
                        Log4NetCustom.LogMessage logMessage = new Log4NetCustom.LogMessage();
                        logMessage.Content = string.Format("TargetSite:{0},Source:{1},Message:{2}", ex.TargetSite.Name, ex.Source, ex.Message);
                        logMessage.MethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
                        log.Error(logMessage);
                    }
                    
                }
                
            }
            catch (Exception ex)
            {
                Log4NetCustom.LogMessage logMessage = new Log4NetCustom.LogMessage();
                logMessage.Content = string.Format("TargetSite:{0},Source:{1},Message:{2}", ex.TargetSite.Name, ex.Source, ex.Message);
                logMessage.MethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
                log.Error(logMessage);
            }
            //this.Response.Clear();
            //this.Response.Write();
            //this.Response.End();
            return this.Response;
        }

        public void UserLoginLogService()
        {
            
            //////////////////////
            string json = string.Empty;

            MailModel mailModel = new MailModel();
            mailModel.MysqlConnectionString = mySqlConnectionString;
            
            if (!string.IsNullOrEmpty(Request.Params["MailFromAddress"]))
            {
                mailModel.MailFromAddress = Request.Params["MailFromAddress"].ToString();
            }
            if (!string.IsNullOrEmpty(Request.Params["MailHost"]))
            {
                mailModel.MailHost = Request.Params["MailHost"].ToString();
            }
            if (!string.IsNullOrEmpty(Request.Params["MailPort"]))
            {
                mailModel.MailPort = Request.Params["MailPort"].ToString();
            }
            if (!string.IsNullOrEmpty(Request.Params["MailFromUser"]))
            {
                mailModel.MailFromUser = Request.Params["MailFromUser"].ToString();
            }
            if (!string.IsNullOrEmpty(Request.Params["MailFormPwd"]))
            {
                mailModel.MailFormPwd = Request.Params["MailFormPwd"].ToString();
            }
            MailHelper mail = new MailHelper(mailModel);
            string GroupCode = string.Empty;
            string MailTitle = string.Empty;
            string MailBody = string.Empty;
            bool IsSeparate = false;
            bool IsDisplyName = true;
            

            if (!string.IsNullOrEmpty(Request.Params["GroupCode"]))
            {
                GroupCode = Request.Params["GroupCode"].ToString();
            }
            if (!string.IsNullOrEmpty(Request.Params["MailTitle"]))
            {
                MailTitle = Request.Params["MailTitle"].ToString();
            }
            else
            {
                MailTitle = "用戶登陸信息";
            }
            if (!string.IsNullOrEmpty(Request.Params["MailBody"]))
            {
                MailBody = Request.Params["MailBody"].ToString();
            }
            if (!string.IsNullOrEmpty(Request.Params["IsSeparate"]))
            {
                if(Request.Params["IsSeparate"].ToString().Trim().ToLower() =="false")
                {
                    IsSeparate = false;
                }
                else if(Request.Params["IsSeparate"].ToString().Trim().ToLower()=="true")
                {
                    IsSeparate = true;
                }
            }
            if (!string.IsNullOrEmpty(Request.Params["IsDisplyName"]))
            {
                if(Request.Params["IsDisplyName"].ToString().Trim().ToLower() =="false")
                {
                    IsSeparate = false;
                }
                else if(Request.Params["IsDisplyName"].ToString().Trim().ToLower()=="true")
                {
                    IsSeparate = true;
                }
            }
            ///獲取用戶登陸信息
            ///
            int totalCount = 0;
            List<ManageLoginQuery> list = new List<ManageLoginQuery>();
            ManageLoginMgr _managelogionMgr = new ManageLoginMgr(mySqlConnectionString);
            ManageLoginQuery query = new ManageLoginQuery();
            query.Start = Convert.ToInt32(Request.Params["start"] ?? "0");
            query.Limit = Convert.ToInt32(Request.Params["limit"] ?? "999");

            query.login_start = CommonFunction.GetPHPTime(DateTime.Now.AddHours(-1).ToString());
            query.login_end = CommonFunction.GetPHPTime(DateTime.Now.ToString());

            DataTable _dt = new DataTable();
            DataRow dr;
            _dt.Columns.Add("登入編號", typeof(string));
            _dt.Columns.Add("登入人名稱", typeof(string));
            _dt.Columns.Add("登入時間", typeof(string));
            _dt.Columns.Add("來源IP", typeof(string));
            list = _managelogionMgr.GetManageLoginList(query, out totalCount);
            foreach (var item in list)
            {
                dr = _dt.NewRow();
                dr["登入編號"] = item.loginID.ToString();
                dr["登入人名稱"] = item.user_name.ToString();
                dr["登入時間"] = CommonFunction.DateTimeToString(item.login_createtime);
                dr["來源IP"] = item.login_ipfrom.ToString();
                _dt.Rows.Add(dr);
            }
            if (_dt.Rows.Count > 0)
            {
                MailBody = GetHtmlByDataTable(_dt);
                /////////////////
                mail.SendToGroup(GroupCode, MailTitle, MailBody, IsSeparate, IsDisplyName);
            }
            json = "{success:true}";
            

        }
        static string GetHtmlByDataTable(DataTable _dtmyMonth)
        {
            System.Text.StringBuilder sbHtml = new System.Text.StringBuilder();
            sbHtml.Append("<table  cellpadding=3 cellspacing=1  border=1 style=\"border-collapse: collapse\">");
            sbHtml.Append("<tr  style=\"text-align: center; COLOR: #0076C8; BACKGROUND-COLOR: #F4FAFF; font-weight: bold\">");
            string[] str = { "style=\"background-color:#dda29a;\"", "style=\"background-color:#d98722;\"", "style=\"background-color:#cfbd2d;\"", "style=\"background-color:#cbd12c;\"", "style=\"background-color:#91ca15;\"", "style=\"background-color:#6dc71e;\"", "style=\"background-color:#25b25c;\"", "style=\"background-color:#13a7a2;\"" };
            string aligns = "align=\"right\"";
            for (int i = 0; i < _dtmyMonth.Columns.Count; i++)
            {
                sbHtml.Append("<th ");
                sbHtml.Append(str[i]);
                sbHtml.Append(" >");
                sbHtml.Append(_dtmyMonth.Columns[i].ColumnName);
                sbHtml.Append("</th>");
            }
            sbHtml.Append("</tr>");
            for (int i = 0; i < _dtmyMonth.Rows.Count; i++)//行
            {
                sbHtml.Append("<tr>");
                for (int j = 0; j < _dtmyMonth.Columns.Count; j++)
                {
                    sbHtml.Append("<td ");
                    sbHtml.Append(aligns);
                    sbHtml.Append(" >");
                    sbHtml.Append(_dtmyMonth.Rows[i][j]);
                    sbHtml.Append("</td>");
                }
                sbHtml.Append("</tr>");
            }
            sbHtml.Append("</table>");
            return sbHtml.ToString();

        }

    }
}
